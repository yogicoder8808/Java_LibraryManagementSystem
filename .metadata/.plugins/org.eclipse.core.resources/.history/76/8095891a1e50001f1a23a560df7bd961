package libraryManagement;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public class LibrarySystem implements Borrowable, Returnable {
    private final Map<String, Book> books = new ConcurrentHashMap<>();
    private final Map<String, User> users = new ConcurrentHashMap<>();
    private final Map<User, List<Book>> borrowedBooks = new ConcurrentHashMap<>();

    public LibrarySystem() {
        // Adding two sample books
        books.put("978-3-16-148410-0", new Book("978-3-16-148410-0", "The Great Gatsby", "F. Scott Fitzgerald", true));
        books.put("978-0-7432-7356-5", new Book("978-0-7432-7356-5", "To Kill a Mockingbird", "Harper Lee", true));
    }

    @Override
    public void borrowBook(User user, Book book) {
        if (!books.containsKey(book.getIsbn())) {
            System.out.println("Book not found.");
            return;
        }

        if (!book.isAvailable()) {
            System.out.println("Book is not available.");
            return;
        }

        borrowedBooks.computeIfAbsent(user, k -> new ArrayList<>()).add(book);
        book.setAvailable(false);
        System.out.println("Book borrowed successfully: " + book);
    }

    @Override
    public void returnBook(User user, Book book) {
        if (!books.containsKey(book.getIsbn())) {
            System.out.println("Book not found.");
            return;
        }

        List<Book> userBooks = borrowedBooks.get(user);
        if (userBooks == null || !userBooks.contains(book)) {
            System.out.println("User did not borrow this book.");
            return;
        }

        userBooks.remove(book);
        book.setAvailable(true);
        System.out.println("Book returned successfully: " + book);
    }

    public void addBook(Book book) {
        books.put(book.getIsbn(), book);
        System.out.println("Book added: " + book);
    }

    public void deleteBook(String isbn) {
        if (confirmAction("Are you sure you want to delete the book with ISBN: " + isbn + "? (yes/no)")) {
            if (books.remove(isbn) != null) {
                System.out.println("Book deleted with ISBN: " + isbn);
            } else {
                System.out.println("No books found with ISBN: " + isbn);
            }
        } else {
            System.out.println("Book deletion cancelled.");
        }
    }

    public void deleteAllBooks() {
        if (confirmAction("Are you sure you want to delete all books and all users? (yes/no)")) {
            books.clear();
            System.out.println("All books deleted.");
        } else {
            System.out.println("Deletion of all books and users cancelled.");
        }
    }

    public void addUser(User user) {
        users.put(user.getEmail(), user);
        System.out.println("New user added: " + user);
    }

    public void removeUser(User user) {
        users.remove(user.getEmail());
        borrowedBooks.remove(user);
        System.out.println("User removed: " + user);
    }

    public void removeAllUsers() {
        users.clear();
        borrowedBooks.clear();
        System.out.println("All users removed.");
    }

    public Optional<Book> findBookByTitle(String title) {
        return books.values().stream()
            .filter(b -> b.getTitle().equalsIgnoreCase(title))
            .findFirst();
    }

    public Optional<User> findUserByEmail(String email) {
        return Optional.ofNullable(users.get(email));
    }

    public void viewBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available.");
        } else {
            books.values().forEach(System.out::println);
        }
    }

    public void searchBooks(String keyword) {
        List<Book> results = books.values().stream()
            .filter(b -> b.getTitle().toLowerCase().contains(keyword.toLowerCase()))
            .collect(Collectors.toList());

        if (results.isEmpty()) {
            System.out.println("No books found for keyword: " + keyword);
        } else {
            results.forEach(System.out::println);
        }
    }

    public void printUserBorrowedBooks(User user) {
        List<Book> books = borrowedBooks.get(user);

        if (books == null || books.isEmpty()) {
            System.out.println("No borrowed books for user: " + user);
        } else {
            books.forEach(System.out::println);
        }
    }

    public void viewAllUsers() {
        if (users.isEmpty()) {
            System.out.println("No users available.");
        } else {
            users.values().forEach(System.out::println);
        }
    }

    private boolean confirmAction(String message) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(message);
        String response = scanner.nextLine().trim().toLowerCase();
        return response.equals("yes");
    }
}

package libraryManagement;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        var scanner = new Scanner(System.in); // Java 10
        var librarySystem = new LibrarySystem();
        User currentUser = null; // To track the currently logged-in user
        boolean isAdmin = false; // To track if the logged-in user is an admin

        while (true) {
            System.out.println("Welcome to Library Management System!");
            System.out.println("0. Exit");
            System.out.println("1. Login");
            System.out.println("2. New User");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 0:
                    System.out.println("Thank you for using the Library Management System. Goodbye!");
                    scanner.close();
                    return;

                case 1:
                case 2:
                    var result = handleUserOrAdmin(scanner, librarySystem, choice == 2);
                    if (result != null) {
                        currentUser = result.getUser();
                        isAdmin = result.isAdmin();
                        handleRoleMenu(scanner, librarySystem, currentUser, isAdmin);
                    }
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static LoginResult handleUserOrAdmin(Scanner scanner, LibrarySystem librarySystem, boolean isNewUser) {
        String email;
        User user = null;
        boolean isAdmin = false;

        if (isNewUser) {
            System.out.print("Enter user name: ");
            String name = scanner.nextLine();
            System.out.print("Enter Phone number: ");
            String phoneNumber = scanner.nextLine();
            System.out.print("Enter Email ID: ");
            email = scanner.nextLine();

            user = new User(name, email, phoneNumber);

            if (librarySystem.findUserByEmail(email).isPresent()) {
                System.out.println("User already exists.");
                return null;
            } else {
                librarySystem.addUser(user);
            }
        } else {
            System.out.print("Enter Email ID: ");
            email = scanner.nextLine();

            user = librarySystem.findUserByEmail(email).orElse(null);

            if (user == null) {
                System.out.println("User not found. Please register as a new user.");
                return null;
            }
        }

        System.out.println("Are you an:");
        System.out.println("1. Admin");
        System.out.println("2. Normal User");

        int roleChoice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (roleChoice) {
            case 1:
                if (verifyAdminPassword(scanner)) {
                    isAdmin = true;
                } else {
                    System.out.println("Invalid admin password. Access denied.");
                    return null;
                }
                break;

            case 2:
                isAdmin = false;
                break;

            default:
                System.out.println("Invalid choice. Returning to main menu.");
                return null;
        }

        return new LoginResult(user, isAdmin);
    }

    private static boolean verifyAdminPassword(Scanner scanner) {
        final String ADMIN_PASSWORD = "admin123"; // Example password; ideally should be securely stored
        System.out.print("Enter admin password: ");
        String inputPassword = scanner.nextLine();
        return ADMIN_PASSWORD.equals(inputPassword);
    }

    private static void handleRoleMenu(Scanner scanner, LibrarySystem librarySystem, User user, boolean isAdmin) {
        if (user == null) return;

        if (isAdmin) {
            showAdminMenu(scanner, librarySystem);
        } else {
            showUserMenu(scanner, librarySystem, user);
        }
    }

    private static void showAdminMenu(Scanner scanner, LibrarySystem librarySystem) {
        while (true) {
            System.out.println("Admin Menu:");
            System.out.println("1. View books");
            System.out.println("2. Add book");
            System.out.println("3. Delete book");
            System.out.println("4. Delete all data");
            System.out.println("5. Search");
            System.out.println("6. View orders");
            System.out.println("7. View users"); // New option to view users
            System.out.println("8. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    librarySystem.viewBooks();
                    break;

                case 2:
                    addBook(scanner, librarySystem);
                    break;

                case 3:
                    deleteBook(scanner, librarySystem);
                    break;

                case 4:
                    deleteAllData(scanner, librarySystem);
                    break;

                case 5:
                    searchBooks(scanner, librarySystem);
                    break;

                case 6:
                    viewOrders(scanner, librarySystem);
                    break;

                case 7:
                    librarySystem.viewAllUsers(); // View all users
                    break;

                case 8:
                    System.out.println("Are you sure you want to quit?");
                    System.out.println("1. Yes");
                    System.out.println("2. Main menu");

                    int exitChoice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    if (exitChoice == 1) {
                        System.out.println("Thank you for using the Library Management System. Goodbye!");
                        return;
                    } else {
                        return; // Return to main menu
                    }

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void showUserMenu(Scanner scanner, LibrarySystem librarySystem, User user) {
        while (true) {
            System.out.println("User Menu:");
            System.out.println("1. View books");
            System.out.println("2. Borrow book");
            System.out.println("3. Return book");
            System.out.println("4. Search");
            System.out.println("5. View orders");
            System.out.println("6. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    librarySystem.viewBooks();
                    break;

                case 2:
                    borrowBook(scanner, librarySystem, user);
                    break;

                case 3:
                    returnBook(scanner, librarySystem, user);
                    break;

                case 4:
                    searchBooks(scanner, librarySystem);
                    break;

                case 5:
                    librarySystem.printUserBorrowedBooks(user);
                    break;

                case 6:
                    System.out.println("Are you sure you want to quit?");
                    System.out.println("1. Yes");
                    System.out.println("2. Main menu");

                    int exitChoice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    if (exitChoice == 1) {
                        System.out.println("Thank you for using the Library Management System. Goodbye!");
                        return;
                    } else {
                        return; // Return to main menu
                    }

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void addBook(Scanner scanner, LibrarySystem librarySystem) {
        System.out.print("Enter ISBN: ");
        var isbn = scanner.nextLine();
        System.out.print("Enter Title: ");
        var title = scanner.nextLine();
        System.out.print("Enter Author: ");
        var author = scanner.nextLine();

        var book = new Book(isbn, title, author, true);
        librarySystem.addBook(book);
    }

    private static void deleteBook(Scanner scanner, LibrarySystem librarySystem) {
        System.out.print("Enter ISBN of the book to delete: ");
        var isbn = scanner.nextLine();

        if (confirmAction("Are you sure you want to delete the book with ISBN: " + isbn + "? (yes/no)")) {
            librarySystem.deleteBook(isbn);
        } else {
            System.out.println("Book deletion cancelled.");
        }
    }

    private static void deleteAllData(Scanner scanner, LibrarySystem librarySystem) {
        if (confirmAction("Are you sure you want to delete all books and all users? (yes/no)")) {
            librarySystem.deleteAllBooks();
            librarySystem.removeAllUsers();
        } else {
            System.out.println("Deletion of all books and users cancelled.");
        }
    }

    private static void searchBooks(Scanner scanner, LibrarySystem librarySystem) {
        System.out.print("Enter search keyword: ");
        var keyword = scanner.nextLine();
        librarySystem.searchBooks(keyword);
    }

    private static void borrowBook(Scanner scanner, LibrarySystem librarySystem, User user) {
        System.out.print("Enter book title to borrow: ");
        var title = scanner.nextLine();
        var book = librarySystem.findBookByTitle(title);

        book.ifPresentOrElse(
            b -> librarySystem.borrowBook(user, b),
            () -> System.out.println("Book not found.")
        );
    }

    private static void returnBook(Scanner scanner, LibrarySystem librarySystem, User user) {
        System.out.print("Enter book title to return: ");
        var title = scanner.nextLine();
        var book = librarySystem.findBookByTitle(title);

        book.ifPresentOrElse(
            b -> librarySystem.returnBook(user, b),
            () -> System.out.println("Book not found.")
        );
    }

    private static void viewOrders(Scanner scanner, LibrarySystem librarySystem) {
        System.out.print("Enter user email to view borrowed books: ");
        var email = scanner.nextLine();
        var user = librarySystem.findUserByEmail(email);

        user.ifPresentOrElse(
            u -> librarySystem.printUserBorrowedBooks(u),
            () -> System.out.println("User not found.")
        );
    }

    private static boolean confirmAction(String message) {
        Scanner scanner = new Scanner(System.in);
        System.out.println(message);
        String response = scanner.nextLine().trim().toLowerCase();
        return response.equals("yes");
    }
}

class LoginResult {
    private final User user;
    private final boolean isAdmin;

    public LoginResult(User user, boolean isAdmin) {
        this.user = user;
        this.isAdmin = isAdmin;
    }

    public User getUser() {
        return user;
    }

    public boolean isAdmin() {
        return isAdmin;
    }
}
